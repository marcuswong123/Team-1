#import necessary files
from pathlib import Path
import csv
#define coh function to process the csv data
def COH_function():
    #intitate empty lists to store the csv data and cash diff
    csvdata = []
    cashdiff = []
    #create file path to input csv and output summary_report.txt
    filepath = Path.cwd() / "csv_reports" / "cash-on-hand.csv"
    fp = Path.cwd() / "summary_report.txt"
    #open the CSV file in read mode and create CSV reader objects
    with filepath.open(mode="r", encoding="UTF-8", newline="") as file:
        csvreader = csv.reader(file)
        next(csvreader) #skip the header row
        #iterate through each row in csv file and store them as csvdata list 
        for row in csvreader:
            csvdata.append([float(row[0]), float(row[1])])
    #calculate the cash diff for each day 
    for day in range(1, len(csvdata)):
        diff = csvdata[day][1] - csvdata[day - 1][1]
        cashdiff.append(diff)
    #check if there is surplus in cash everyday 
    everydaysurplus = True
    for diff in cashdiff:
        if diff <= 0:
            everydaysurplus = False
            break
    #check if there is deficit in cash everyday
    everydaydeficit = True 
    for diff in cashdiff: 
        if diff >= 0:
            everydaydeficit = False
            break
    #if there is surplus everyday find day with highest cash surplus
    with fp.open(mode="a", encoding="UTF-8", newline="") as file:
        if everydaysurplus:
            highestsurplus = cashdiff[0]
            highestsurplusday = csvdata[1][0]
            for day, diff in enumerate(cashdiff, start=1):
                if diff > highestsurplus:
                    highestsurplus = diff
                    highestsurplusday = csvdata[day][0]
            #writes [CASH SURPLUS]LINE and highest cash surplus info to summary_report.txt
            file.write("[CASH SURPLUS] CASH ON EACH DAY IS HIGHER THAN PREVIOUS DAY\n")
            file.write(f'[HIGHEST CASH SURPLUS] DAY: {highestsurplusday}, AMOUNT: SGD{highestsurplus}\n')
 # if there is deficit everyday find day with highest cash deficit
        elif everydaydeficit:
            highestdeficit = cashdiff[0]
            highestdeficitday = csvdata[1][0]
            for day, diff in enumerate(cashdiff, start=1):
                if diff < highestdeficit:
                    highestdeficit = abs(diff) #makes -ve value +ve 
                    highestdeficitday = csvdata[day][0]
            #write the [CASH DEFICIT]LINE and highest cash deficit information to summary_report.txt
            file.write("[CASH DEFICIT] CASH ON EACH DAY IS LOWER THAN PREVIOUS DAY\n")
            file.write(f'[HIGHEST CASH DEFICIT] DAY: {highestdeficitday}, AMOUNT: SGD {abs(highestdeficit)}\n')
        #if there is no surplus or deficit everyday, report days with cash deficit together with highest 3 deficits 
        else:
            #generates a list of tuples containing days and their cash deficits for days with deficit
            deficits_with_days = [(csvdata[day + 1][0], abs(diff)) for day, diff in enumerate(cashdiff) if diff < 0]
            deficit_amounts = [abs(diff) for day, diff in deficits_with_days]#makes -ve value +ve 
            deficit_amounts.sort(reverse=True)  #sorts the deficits in descending order
            #selects top 3 largest deficits and prints it in output 
            top_3_deficits = deficit_amounts[:3]
            for day, diff in deficits_with_days:
                if top_3_deficits[0] == diff:
                    file.write(f'[HIGHEST CASH DEFICIT] DAY: {day}, AMOUNT: SGD {diff}\n')
                    break
            if len(top_3_deficits) > 1:
                for day, diff in deficits_with_days:
                    if top_3_deficits[1] == diff:
                        file.write(f'[2nd HIGHEST CASH DEFICIT] DAY: {day}, AMOUNT: SGD {diff}\n')
                        break

            if len(top_3_deficits) > 2:
                for day, diff in deficits_with_days:
                    if top_3_deficits[2] == diff:
                        file.write(f'[3rd HIGHEST CASH DEFICIT] DAY: {day}, AMOUNT: SGD {diff}\n')
                        break
            #if not in top3 but is deficit, it will print out all the deficit days and amount
            for day, deficit in deficits_with_days:
                if deficit not in top_3_deficits:
                    file.write(f'[CASH DEFICIT] DAY: {day}, AMOUNT: SGD {deficit}\n')










